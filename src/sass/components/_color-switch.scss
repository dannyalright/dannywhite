// Styles the toggle that controls light/dark color scheme
// https://piccalil.li/tutorial/create-a-user-controlled-dark-or-light-mode/

// Don't show the switch if the user doesn't have JS enabled
.no-js .color-switch {
  display: none;
}

// Hide the status label for a11y
.visually-hidden {
  display: block;
  height: 1px;
  width: 1px;
  overflow: hidden;
  clip: rect(1px 1px 1px 1px);
  clip-path: inset(1px);
  white-space: nowrap;
  position: absolute;
}

.color-switch {
  width: fit-content;
  height: fit-content;
  // Extra vertical space for bottom toolbar controls
  margin-bottom: var(--spacing-lg);

  @media (min-width: 1024px) {
    grid-column: 8;
    justify-self: end;
    // Extra vertical space probably not necessary
    margin-bottom: 0;
  }

  .toggle-button {
    border: 1px solid var(--color-border-primary);
    display: flex;
    flex-direction: row;

    @media (min-width: 1024px) {
      flex-direction: column;
    }

    &:hover {
      cursor: pointer;
    }

    .switch-side {
      width: 24px;
      height: 24px;
      display: flex;
      align-items: center;
      justify-content: center;

      // Show any paths that might fall out of the container
      overflow: visible;

      svg {
        // Show any paths that might fall out of the container
        overflow: visible;
      }
    }

    .light {
      background-color: var(--color-background);

      svg > path {
        fill: var(--color-text-primary);
        // Optically align
        transform: translateY(-0.85px);
      }
    }

    .dark {
      background-color: var(--color-text-primary);

      svg > path {
        fill: var(--color-background);
        // Optically align
        transform: translateX(0.25px);
      }
    }
  }
}

// TODO: join @media and [data...] with repetitious bits into one @mixin
// Make changes if user prefers dark color scheme
// @media (prefers-color-scheme: dark) {
//   :root {
//     --color-mode: "dark";
//   }

//   :root:not([data-user-color-scheme]) {
//     .color-switch .toggle-button {
//       .light {
//         background-color: var(--color-background-dark);

//         svg > path {
//           fill: var(--color-background-light);
//         }
//       }
//       .dark {
//         background-color: var(--color-background-light);

//         svg > path {
//           fill: var(--color-background-dark);
//         }
//       }
//     }
//   }
// }
// // Repeats the above
// [data-user-color-scheme="dark"] {
//   .color-switch .toggle-button {
//     .light {
//       background-color: var(--color-background-dark);

//       svg > path {
//         fill: var(--color-background-light);
//       }
//     }
//     .dark {
//       background-color: var(--color-background-light);

//       svg > path {
//         fill: var(--color-background-dark);
//       }
//     }
//   }
// }
